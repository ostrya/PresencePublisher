plugins {
    id 'com.github.triplet.play' version '2.6.2'
    id 'com.jaredsburrows.license' version '0.8.42'
    id 'org.ajoberstar.grgit' version '4.0.1'
}

apply plugin: 'com.android.application'

def getBuildVersionCode() {
    def tagCount = grgit.tag.list().findAll{ it.getName().matches('v[1-9].*') }.size()
    return isTagged() ? tagCount : tagCount + 1
}

def getBuildApplicationId() {
    return isTagged() ? 'org.ostrya.presencepublisher' : 'org.ostrya.presencepublisher.snapshot'
}

def getBuildVersionName() {
    return grgit.describe(tags: true, match: ['v[1-9]*']).substring(1)
}

def isTagged() {
    return getBuildVersionName().matches('[0-9]+\\.[0-9]+\\.[0-9]+')
}

def getSigningConfig() {
    if (hasProperty('keystorePath')) {
        return {
            storeFile file(keystorePath)
            storePassword keystorePassword
            keyAlias signkeyAlias
            keyPassword signkeyPassword
        }
    } else {
        return {}
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId getBuildApplicationId()
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 25
        versionName '2.0.0'
    }
    signingConfigs {
        release getSigningConfig()
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '29.0.2'
}

afterEvaluate {
    preBuild.dependsOn(checkParameters)
}

task checkParameters {
    doLast {
        if (android.defaultConfig.versionCode != getBuildVersionCode()) {
            throw new InvalidUserDataException("Version code should be ${getBuildVersionCode()}")
        }
        if (isTagged() && getBuildVersionName() != android.defaultConfig.versionName) {
            throw new InvalidUserDataException("Version name should be ${getBuildVersionName()}")
        }
    }
}

afterEvaluate {
    task checkUpdatedLicenseFile {
        dependsOn licenseDebugReport
        doLast {
            if (grgit.status().unstaged.modified.contains('app/src/main/assets/open_source_licenses.html')) {
                throw new InvalidUserDataException('License file has changed, please commit new version first')
            }
        }
    }
}

play {
    serviceAccountCredentials = file("../../google-key.json")
}

dependencies {
    //noinspection GradleDependency due to https://github.com/AltBeacon/android-beacon-library/issues/919
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.security:security-crypto:1.0.0-alpha02'
    implementation('com.hypertrack:hyperlog:0.0.10') {
        exclude group: 'com.android.support'
        exclude group: 'com.android.volley'
    }
    implementation 'org.altbeacon:android-beacon-library:2.16.3'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.2'
}
